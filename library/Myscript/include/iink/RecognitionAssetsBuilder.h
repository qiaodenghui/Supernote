// Copyright @ MyScript. All rights reserved.

#pragma once

#include <iink/String.h>
#include <vector>

namespace myscript {
namespace iink {

/**
 * The RecognitionAssetsBuilder implements the tools to generate and save
 * recognition assets.
 *
 * @since 1.2.4
 */
class RecognitionAssetsBuilder
{
public:
  virtual ~RecognitionAssetsBuilder() = default;

  /**
   * Returns the types of assets that can be generated by this recognition
   *   assets builder.
   *
   * @return an array of the supported types.
   */
  virtual std::vector<String> getSupportedRecognitionAssetsTypes() = 0;

  /**
   * Compiles data into a recognition asset.
   *
   * @param type the type of asset that will be generated.
   * @param data the data to compile.
   * @throws std::invalid_argument when `type` is not supported.
   * @throws std::runtime_error when the content of data could not be compiled
   *   into a recognition asset.
   */
  virtual void compile(const String& type, const String& data) = 0;

  /**
   * Get the last compilation errors.
   *
   * @return a description of the errors that occurred during the last compilation.
   */
  virtual String getCompilationErrors() const = 0;

  /**
   * Saves the previously compiled recognition asset.
   *
   * @param fileName the destination file.
   * @throws std::runtime_error when there is no valid recognition asset to store.
   * @throws std::runtime_error when an I/O operation fails.
   */
  virtual void store(const String& fileName) const = 0;
};

}
}
